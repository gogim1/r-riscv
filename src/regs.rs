use std::collections::HashMap;
use strum_macros::EnumIter;

#[derive(PartialEq, Hash, Eq, EnumIter)]
pub enum Reg {
    RegZero,
    RegRA,
    RegSP,
    RegGP,
    RegTP,
    RegT0,
    RegT1,
    RegT2,
    RegS0,
    RegS1,
    RegA0,
    RegA1,
    RegA2,
    RegA3,
    RegA4,
    RegA5,
    RegA6,
    RegA7,
    RegS2,
    RegS3,
    RegS4,
    RegS5,
    RegS6,
    RegS7,
    RegS8,
    RegS9,
    RegS10,
    RegS11,
    RegT3,
    RegT4,
    RegT5,
    RegT6,
}

pub fn reg_name(reg: Reg) -> &'static str {
    match reg {
        Reg::RegZero => "zero",
        Reg::RegRA => "ra",
        Reg::RegSP => "sp",
        Reg::RegGP => "gp",
        Reg::RegTP => "tp",
        Reg::RegT0 => "t0",
        Reg::RegT1 => "t1",
        Reg::RegT2 => "t2",
        Reg::RegS0 => "s0",
        Reg::RegS1 => "s1",
        Reg::RegA0 => "a0",
        Reg::RegA1 => "a1",
        Reg::RegA2 => "a2",
        Reg::RegA3 => "a3",
        Reg::RegA4 => "a4",
        Reg::RegA5 => "a5",
        Reg::RegA6 => "a6",
        Reg::RegA7 => "a7",
        Reg::RegS2 => "s2",
        Reg::RegS3 => "s3",
        Reg::RegS4 => "s4",
        Reg::RegS5 => "s5",
        Reg::RegS6 => "s6",
        Reg::RegS7 => "s7",
        Reg::RegS8 => "s8",
        Reg::RegS9 => "s9",
        Reg::RegS10 => "s10",
        Reg::RegS11 => "s11",
        Reg::RegT3 => "t3",
        Reg::RegT4 => "t4",
        Reg::RegT5 => "t5",
        Reg::RegT6 => "t6",
    }
}

pub type RegSet = HashMap<Reg, u32>;
